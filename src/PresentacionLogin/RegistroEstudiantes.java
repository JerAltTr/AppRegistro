package PresentacionLogin;

import Datos.Escrituratxt;
import Datos.Lecturatxt;
import Entidad.Estudiante;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class RegistroEstudiantes extends javax.swing.JInternalFrame {

    /**
     * Creates new form RegistroEstudiantes
     */
    public RegistroEstudiantes() {
        initComponents();
        disenioTabla();
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngSexo = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rbMasculino = new javax.swing.JRadioButton();
        rbFemenino = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        txtApoderado = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbGrado = new javax.swing.JComboBox<>();
        dateNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        txtCelular = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMatricula = new javax.swing.JTable();

        setTitle("Registro de Estudiantes");

        jLabel1.setFont(new java.awt.Font("Swis721 WGL4 BT", 1, 24)); // NOI18N
        jLabel1.setText("MATRICULA DEL ESTUDIANTE");

        jLabel2.setText("DNI:");

        txtDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDNIKeyTyped(evt);
            }
        });

        jLabel3.setText("Nombre:");

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel4.setText("Fecha de nacimiento:");

        jLabel5.setText("Sexo:");

        btngSexo.add(rbMasculino);
        rbMasculino.setText("Masculino");

        btngSexo.add(rbFemenino);
        rbFemenino.setText("Femenino");

        jLabel6.setText("DNI apoderado:");

        txtApoderado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApoderadoKeyTyped(evt);
            }
        });

        jLabel7.setText("Grado acad√©mico:");

        cbGrado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Primero", "Segundo", "Tercero", "Cuarto", "Quinto" }));

        dateNacimiento.setMaxSelectableDate(new java.util.Date(1325397666000L));
        dateNacimiento.setMinSelectableDate(new java.util.Date(1104559266000L));

        jLabel8.setText("Numero de Celular:");

        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelularKeyTyped(evt);
            }
        });

        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carpeta.png"))); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRegistrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRegistrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegistrarMouseClicked(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/componer.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModificar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnModificar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarMouseClicked(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/borrar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });

        tableMatricula.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMatricula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMatriculaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMatricula);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(txtDNI)
                            .addComponent(jLabel3)
                            .addComponent(txtNombre)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(txtApoderado, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbMasculino)
                            .addComponent(rbFemenino)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(dateNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbGrado, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(207, 207, 207))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnModificar)
                        .addGap(171, 171, 171)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))))
            .addGroup(layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(jLabel1)
                .addContainerGap(220, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbGrado, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbMasculino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbFemenino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApoderado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegistrarMouseClicked
        // TODO add your handling code here:
        // Verificar que todos los campos est√©n rellenados
        if (txtDNI.getText().isEmpty() || txtNombre.getText().isEmpty() || txtApoderado.getText().isEmpty()
                || txtCelular.getText().isEmpty() || (!rbMasculino.isSelected() && !rbFemenino.isSelected())
                || cbGrado.getSelectedIndex() == 0 || dateNacimiento.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Por favor, rellene todos los campos.");
        } else {
            // Crear una instancia de Estudiante con los datos ingresados
            Estudiante estudiante = obtenerDatos();

            // Escribir el estudiante en alg√∫n lugar (supongo que 'escribir' es un objeto de tipo Escrituratxt)
            Escrituratxt escribir = new Escrituratxt();
            escribir.registrarEstudiante(estudiante);

            // Actualizaci√≥n de la tabla
            model.addRow(new Object[]{
                estudiante.getDNI(),
                estudiante.getNombre(),
                (rbMasculino.isSelected()) ? "Masculino" : "Femenino",
                txtApoderado.getText(),
                cbGrado.getSelectedItem().toString(),
                txtCelular.getText(),
                // Obtener la fecha de nacimiento en el formato deseado
                new SimpleDateFormat("dd/MM/yyyy").format(dateNacimiento.getDate()),
                estudiante.getEdad() // La edad ya se calcul√≥ autom√°ticamente al crear el estudiante
            });

            // Limpiar campos despu√©s de registrar
            limpiarCampos();
            JOptionPane.showMessageDialog(this, "Se insertaron correctamente los datos del Estudiante");
        }
    }//GEN-LAST:event_btnRegistrarMouseClicked

    private void btnModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = tableMatricula.getSelectedRow();
        if (filaSeleccionada != -1) {
            // Verificar que todos los campos est√©n llenos
            if (txtDNI.getText().isEmpty() || txtNombre.getText().isEmpty() || txtApoderado.getText().isEmpty()
                    || txtCelular.getText().isEmpty() || (!rbMasculino.isSelected() && !rbFemenino.isSelected())
                    || cbGrado.getSelectedIndex() == 0 || dateNacimiento.getDate() == null) {

                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los nuevos datos de los campos de texto y botones de opci√≥n
            String dni = txtDNI.getText();
            String nombre = txtNombre.getText();
            String apoderado = txtApoderado.getText();
            String grado = cbGrado.getSelectedItem().toString();
            String celular = txtCelular.getText();
            String sexo = rbMasculino.isSelected() ? "Masculino" : "Femenino";
            // Formatear la fecha en el formato deseado
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String fechaNacimiento = sdf.format(dateNacimiento.getDate());

            // Actualizar los datos en la tabla
            model.setValueAt(dni, filaSeleccionada, 0);
            model.setValueAt(nombre, filaSeleccionada, 1);
            model.setValueAt(sexo, filaSeleccionada, 2);
            model.setValueAt(apoderado, filaSeleccionada, 3);
            model.setValueAt(grado, filaSeleccionada, 4);
            model.setValueAt(celular, filaSeleccionada, 5);
            model.setValueAt(fechaNacimiento, filaSeleccionada, 6);

            // Actualizar los datos en el archivo de texto
            actualizarEstudiante();

            // Limpiar los campos despu√©s de modificar
            limpiarCampos();

            // Mostrar el mensaje de modificaci√≥n exitosa
            JOptionPane.showMessageDialog(this, "Se modific√≥ la informaci√≥n del estudiante exitosamente.", "Modificaci√≥n exitosa", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarMouseClicked

    private void tableMatriculaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMatriculaMouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = tableMatricula.getSelectedRow();
        if (filaSeleccionada != -1) {
            // Obtener los valores de la fila seleccionada
            String dni = model.getValueAt(filaSeleccionada, 0).toString();
            String nombre = model.getValueAt(filaSeleccionada, 1).toString();
            String sexo = model.getValueAt(filaSeleccionada, 2).toString();
            String apoderado = model.getValueAt(filaSeleccionada, 3).toString();
            String grado = model.getValueAt(filaSeleccionada, 4).toString();
            String telefono = model.getValueAt(filaSeleccionada, 5).toString();
            String fechaNacimiento = model.getValueAt(filaSeleccionada, 6).toString();
            String edad = model.getValueAt(filaSeleccionada, 7).toString();

            // Asignar los valores a los campos de texto y otros componentes
            txtDNI.setText(dni);
            txtNombre.setText(nombre);
            // Asignar el valor de sexo en funci√≥n de lo que se obtuvo de la tabla
            if (sexo.equals("Masculino")) {
                rbMasculino.setSelected(true);
                rbFemenino.setSelected(false);
            } else {
                rbMasculino.setSelected(false);
                rbFemenino.setSelected(true);
            }
            txtApoderado.setText(apoderado);
            // Asignar el valor de grado seleccionando el √≠tem correspondiente en el ComboBox
            cbGrado.setSelectedItem(grado);
            txtCelular.setText(telefono);
            // Parsear la fecha de nacimiento al formato correcto antes de asignarla al componente
            try {
                Date fecha = new SimpleDateFormat("dd/MM/yyyy").parse(fechaNacimiento);
                dateNacimiento.setDate(fecha);
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_tableMatriculaMouseClicked

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        // TODO add your handling code here:
        // Obtener la fila seleccionada
        int filaSeleccionada = tableMatricula.getSelectedRow();
        if (filaSeleccionada != -1) {
            // Eliminar la fila del modelo de la tabla
            model.removeRow(filaSeleccionada);

            // Actualizar el archivo de texto con los datos restantes
            actualizarEstudiante();

            // Limpiar los campos despu√©s de eliminar
            limpiarCampos();

            // Mostrar el mensaje de eliminaci√≥n exitosa
            JOptionPane.showMessageDialog(this, "Se elimin√≥ el registro correctamente.", "Eliminaci√≥n exitosa", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void txtDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDNIKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
        if (txtDNI.getText().length() > 7) {
            evt.consume(); // Consume el evento si se alcanz√≥ el l√≠mite de caracteres
        }
    }//GEN-LAST:event_txtDNIKeyTyped

    private void txtApoderadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApoderadoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
        if (txtApoderado.getText().length() > 7) {
            evt.consume(); // Consume el evento si se alcanz√≥ el l√≠mite de caracteres
        }
    }//GEN-LAST:event_txtApoderadoKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' '))
            evt.consume();
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelularKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
        if (txtCelular.getText().length() > 8) {
            evt.consume(); // Consume el evento si se alcanz√≥ el l√≠mite de caracteres
        }
    }//GEN-LAST:event_txtCelularKeyTyped

    private void actualizarEstudiante() {
        // Obtener la lista de estudiantes del modelo de la tabla
        List<Estudiante> listaEstudiantes = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            String dni = (String) model.getValueAt(i, 0);
            String nombre = (String) model.getValueAt(i, 1);
            String sexo = (String) model.getValueAt(i, 2);
            String apoderado = (String) model.getValueAt(i, 3);
            String grado = (String) model.getValueAt(i, 4);
            String telefono = (String) model.getValueAt(i, 5);
            String fechaNacimiento = (String) model.getValueAt(i, 6);
            int edad = (int) model.getValueAt(i, 7); // Obtener directamente el valor entero

            Estudiante estudiante = new Estudiante(dni, nombre, sexo, apoderado, grado, telefono, fechaNacimiento);
            estudiante.setEdad(edad);
            listaEstudiantes.add(estudiante);
        }

        // Escribir la lista de estudiantes en el archivo de texto
        Escrituratxt escritura = new Escrituratxt();
        escritura.actualizarEstudiante(listaEstudiantes);
    }

    // M√©todo para limpiar los campos despu√©s de registrar
    private void limpiarCampos() {
        txtDNI.setText("");
        txtNombre.setText("");
        rbMasculino.setSelected(false);
        rbFemenino.setSelected(false);
        txtApoderado.setText("");
        txtCelular.setText("");
        cbGrado.setSelectedIndex(0);
        dateNacimiento.setDate(null); // Limpiar la fecha de nacimiento
    }

    private Estudiante obtenerDatos() {
        String dni = txtDNI.getText();
        String nombre = txtNombre.getText();
        String sexo = "";
        if (rbMasculino.isSelected()) {
            sexo = "Masculino";
        }
        if (rbFemenino.isSelected()) {
            sexo = "Femenino";
        }
        String dniApoderado = txtApoderado.getText();
        String gradoAcademico = cbGrado.getSelectedItem().toString();
        String telefono = txtCelular.getText();
        // Convertir la fecha de nacimiento a un String en el formato "dd/MM/yyyy"
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String fecNacimiento = sdf.format(dateNacimiento.getDate());
        // La edad se calcular√° autom√°ticamente en el constructor de Estudiante
        Estudiante estudiante = new Estudiante(dni, nombre, sexo, dniApoderado, gradoAcademico, telefono, fecNacimiento);
        return estudiante;
    }

    DefaultTableModel model;

    private void disenioTabla() {
        model = new DefaultTableModel(new Object[]{"DNI", "NOMBRE", "G√âNERO", "DNI_APODERADO", "GRADO_ACAD", "CELULAR", "FECH_NACIMIENTO", "EDAD"}, 0);
        tableMatricula.setModel(model);
        //cargarDatos();
    }

    private void cargarDatos() {
        model.setRowCount(0); // Limpiar el modelo antes de cargar los datos

        Lecturatxt leer = new Lecturatxt();
        List<Estudiante> listaEstudiantes = leer.leerEstudiantes();

        for (Estudiante estudiante : listaEstudiantes) {
            model.addRow(new Object[]{estudiante.getDNI(),
                estudiante.getNombre(),
                estudiante.getSexo(),
                estudiante.getApoderado(),
                estudiante.getGrado(),
                estudiante.getTelefono(),
                estudiante.getFechaNac(),
                estudiante.getEdad()});
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.ButtonGroup btngSexo;
    private javax.swing.JComboBox<String> cbGrado;
    private com.toedter.calendar.JDateChooser dateNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbFemenino;
    private javax.swing.JRadioButton rbMasculino;
    private javax.swing.JTable tableMatricula;
    private javax.swing.JTextField txtApoderado;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
